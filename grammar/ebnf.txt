program ::= (include)* (construct)* EOF

construct ::= structdecl
            | vardecl
            | funcdecl

include ::= Include LitString

structdecl ::= structtype LBrace (vardecl)+ RBrace Semi

vardecl ::= type Ident Semi
          | type Ident LBrack LitInt RBrack Semi

funcdecl ::= type Ident LParen formals RParen block

type ::= primitivetype
       | structtype

primitivetype ::= (Type BuiltinType) stars
structtype    ::= Struct Ident stars

BuiltinType ::= Int
              | Double
              | Char
              | Void

stars ::= (Asterisk)*

formals ::= [ type Ident (Comma type Ident)* ]

stmt ::= block
       | While LParen expr RParen stmt
       | For LParen [expr] Semi expr Semi [expr] RParen stmt
       | If LParen expr RParen stmt [Else stmt]
       | Return [expr] Semi
       | expr Assign expr Semi
       | expr Semi

block ::= LBrace (block_element)* RBrace

block_element ::= vardecl
                | stmt

expr ::= LitInt
       | LitString
       | LitChar
       | LitDouble
       | LitNull
       | Ident
       | (expr)
       | expr op expr
       | Minus expr
       | Not expr
       | arrayaccess
       | fieldaccess
       | deref
       | addressof
       | funccall
       | sizeof
       | typecast

op ::= Less
     | Leq
     | Greater
     | Geq
     | Neq
     | Equal
     | Plus
     | Minus
     | Div
     | Asterisk
     | Mod
     | Or
     | And
     | Caret
     | Ampers
     | Bar

funccall    ::= Ident LParen actuals RParen
arrayaccess ::= expr LBrack expr RBrack
fieldaccess ::= expr Dot Ident
              | expr Arrow Ident
deref       ::= Asterisk expr
addressof   ::= Ampers expr
sizeof      ::= Sizeof LParen type RParen
typecast    ::= LParen type RParen expr

actuals ::= [expr (Comma expr)*]