program ::= includes_list structdecl_list vardecl_list funcdecl_list EOF

includes_list ::= include includes_list
                | ε
include ::= Include LitString

structdecl_list ::= structdecl structdecl_list
                  | ε
structdecl ::= structtype LBrace vardecl_list_nonempty RBrace Semi

vardecl_list ::= vardecl vardecl_list    
               | ε
vardecl_list_nonempty ::= vardecl vardecl_list
vardecl := type Ident Semi
         | type Ident LBrack LitInt RBrack Semi

funcdecl_list ::= funcdecl funcdecl_list
                | ε
funcdecl ::= type Ident LParen formals RParen block

type ::= primitivetype
       | structtype

primitivetype ::= (Type BuiltinType) stars
structtype    ::= Struct Ident

BuiltinType ::= Int
              | Double
              | Char
              | Void

stars ::= Asterisk stars
        | ε

formals ::= formal formals_list
          | ε
formal ::= type Ident
formals_list ::= Comma formal formals_list
               | ε

stmt ::= block
       | While LParen expr RParen
       | For LParen opt_expr Semi expr Semi opt_expr RParen
       | If LParen expr RParen stmt opt_else
       | Return opt_expr Semi
       | expr Assign expr Semi
       | expr Semi

stmt_list ::= stmt stmt_list
            | ε

block ::= LBrace vardecl_list stmt_list RBrace

opt_else ::= Else stmt
           | ε
opt_expr ::= expr
           | ε

expr ::= LitInt
       | LitString
       | LitChar
       | LitDouble
       | LitNull
       | Ident
       | (expr)
       | expr op expr
       | arrayaccess
       | fieldaccess
       | deref
       | funccall
       | sizeof
       | typecast
       
op ::= Less
     | Leq
     | Greater
     | Geq
     | Neq
     | Equal
     | Plus
     | Minus
     | Div
     | Asterisk
     | Mod
     | Or
     | And
     | Caret
     | Ampers
     | Bar

funccall    ::= Ident LParen actuals RParen
arrayaccess ::= expr LBrack expr RBrack
fieldaccess ::= expr Dot Ident
deref       ::= Asterisk expr
sizeof      ::= Sizeof LParen type RParen
typecast    ::= LParen type RParen expr

actuals ::= expr actuals_list
          | ε

actuals_list ::= Comma expr 
               | ε