program ::= includes_list construct_list EOF

construct ::= structdecl
            | vardecl
            | funcdecl

construct_list ::= construct construct_list
                 | ε                   

includes_list ::= include includes_list
                | ε
include ::= Include LitString

structdecl ::= Struct Ident LBrace vardecl_list_nonempty RBrace Semi

vardecl_list ::= vardecl vardecl_list    
               | ε
vardecl_list_nonempty ::= vardecl vardecl_list

vardecl := type Ident array_sizes Semi

funcdecl ::= type Ident LParen formals RParen block
           | type Ident LParen RParen block

type ::= primitive_type
       | struct_type

primitive_type ::= (Type BuiltinType) stars
struct_type    ::= Struct Ident stars

BuiltinType ::= Int
              | Double
              | Char
              | Void

stars ::= Asterisk stars
        | ε

formals ::= formal
          | formals Comma formal

formal ::= type Ident brackets

stmt ::= expr Semi
       | block
       | While LParen expr RParen stmt
       | For LParen opt_expr Semi opt_expr Semi opt_expr RParen stmt
       | If LParen expr RParen stmt
       | If LParen expr RParen stmt Else stmt
       | Return opt_expr Semi
       | vardecl

block ::= LBrace block_stmts RBrace

block_stmts ::= stmt block_stmts
              | ε

opt_expr ::= expr
           | ε

expr ::= LitInt
       | LitString
       | LitChar
       | LitDouble
       | LitNull
       | Ident
       | (expr)
       | expr op expr
       | Minus expr
       | Not expr
       | arrayaccess
       | fieldaccess
       | deref
       | addressof
       | funccall
       | assign
       | sizeof
       | typecast
       
op ::= Less
     | Leq
     | Greater
     | Geq
     | Neq
     | Equal
     | Plus
     | Minus
     | Div
     | Asterisk
     | Mod
     | Or
     | And
     | Caret
     | Ampers
     | Bar

funccall    ::= Ident LParen actuals RParen
              | Ident LParen RParen

arrayaccess ::= expr LBrack expr RBrack
fieldaccess ::= expr Dot Ident
              | expr Arrow Ident
deref       ::= Asterisk expr
addressof   ::= Ampers expr
sizeof      ::= Sizeof LParen type RParen
typecast    ::= LParen type array_sizes RParen expr
assign      ::= expr Assign expr
       
actuals ::= expr
          | actuals ',' expr

array_sizes ::= array_sizes LBrack LitInt RBrack
              | ε

brackets ::= brackets LBrack RBrack 
           | ε