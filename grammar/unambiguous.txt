program ::= includes_list construct_list EOF

construct ::= structdecl
            | vardecl
            | funcdecl

construct_list ::= construct construct_list
                 | ε                   

includes_list ::= include includes_list
                | ε
include ::= Include LitString

structdecl ::= structtype LBrace vardecl_list_nonempty RBrace Semi

vardecl_list ::= vardecl vardecl_list    
               | ε
vardecl_list_nonempty ::= vardecl vardecl_list

vardecl := type Ident Semi
         | type Ident LBrack LitInt RBrack Semi

funcdecl ::= type Ident LParen formals RParen block

type ::= primitivetype
       | structtype

primitivetype ::= (Type BuiltinType) stars
structtype    ::= Struct Ident stars

BuiltinType ::= Int
              | Double
              | Char
              | Void

stars ::= Asterisk stars
        | ε

formals ::= formal formals_list
          | ε
formal ::= type Ident
formals_list ::= Comma formal formals_list
               | ε

stmt ::= block
       | While LParen expr RParen stmt
       | For LParen opt_expr Semi expr Semi opt_expr RParen stmt
       | If LParen expr RParen stmt opt_else
       | Return opt_expr Semi
       | expr Assign expr Semi
       | expr Semi

block ::= LBrace block_elements_list RBrace

block_elements_list ::= block_element block_elements_list
                      | ε

block_element ::= vardecl 
                | stmt

opt_else ::= Else stmt
           | ε
opt_expr ::= expr
           | ε

expr ::= logical_or_level_expr

logical_or_level_expr ::= logical_or_level_expr Or logical_and_level_expr
                        | logical_and_level_expr

logical_and_level_expr ::= logical_and_level_expr And bitwise_or_level_expr
                         | bitwise_or_level_expr

bitwise_or_level_expr ::= bitwise_or_level_expr Bar xor_level_expr
                        | xor_level_expr

xor_level_expr ::= xor_level_expr Caret bitwise_and_level_expr
                 | bitwise_and_level_expr

bitwise_and_level_expr ::= and_level_expr Ampers eq_level_expr
                 | eq_level_expr

eq_level_expr ::= eq_level_expr Eq comp_level_expr
                | eq_level_expr Neq comp_level_expr
                | comp_level_expr

comp_level_expr ::= comp_level_expr Less add_level_expr
                  | comp_level_expr Leq add_level_expr
                  | comp_level_expr Greater add_level_expr
                  | comp_level_expr Geq add_level_expr
                  | add_level_expr

add_level_expr ::= add_level_expr Plus mult_level_expr
                 | add_level_expr Minus mult_level_expr
                 | mult_level_expr

mult_level_expr ::= mult_level_expr Asterisk unary_level_expr
                  | mult_level_expr Div unary_level_expr
                  | mult_level_expr Mod unary_level_expr
                  | unary_level_expr

unary_level_expr ::= Minus unary_level_expr
                   | Not unary_level_expr
                   | typecast
                   | deref
                   | addressof
                   | sizeof
                   | call_level_expr

typecast  ::= LParen type RParen unary_level_expr
deref     ::= Asterisk unary_level_expr
addressof ::= Ampers unary_level_expr
sizeof    ::= Sizeof LParen type RParen

call_level_expr ::= call_level_expr funccall
                  | call_level_expr arrayaccess
                  | call_level_expr fieldaccess
                  | base_expr

funccall    ::=  LParen actuals RParen
arrayaccess ::=  LBrack expr RBrack
fieldaccess ::=  Dot Ident
              |  Arrow Ident

base_expr ::= LitInt
            | LitString
            | LitChar
            | LitDouble
            | LitNull
            | Ident
            | LParen expr RParen

actuals ::= expr actuals_list
          | ε

actuals_list ::= Comma expr 
               | ε